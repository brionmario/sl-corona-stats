{"version":3,"sources":["components/CoronaData.js","App.js","serviceWorker.js","index.js"],"names":["CoronaData","state","data","timeDiff","setCoronaDate","timestamp","update_date_time","console","log","updatedTimestamp","moment","diff","setState","axios","get","then","response","this","local_deaths","global_deaths","local_total_cases","global_total_cases","local_recovered","global_recovered","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sUAuFeA,E,2MAjFXC,MAAQ,CACJC,KAAM,GACNC,SAAU,G,EAWdC,cAAgB,SAACF,GACb,IAAIG,EAAYH,EAAKI,iBACrBC,QAAQC,IAAIH,GACZ,IAAII,EAAmBC,IAAOL,GAC1BF,EAAWO,MAASC,KAAKF,EAAkB,WAC/C,EAAKG,SAAS,CACVV,KAAMA,EACNC,SAAUA,K,mFAfG,IAAD,OAChBI,QAAQC,IAAI,eACZK,IAAMC,IAAI,wDACLC,MAAK,SAAAC,GAAQ,OACV,EAAKZ,cAAcY,EAASd,KAAKA,W,+BAgBzC,OACI,6BACI,+CACA,6BACA,+BACI,+BACI,4BACI,4BACI,0CAEJ,4BACI,4BAAKe,KAAKhB,MAAMC,KAAKgB,eAEzB,4BACI,8CAEJ,4BACI,4BAAKD,KAAKhB,MAAMC,KAAKiB,iBAG7B,4BACI,4BACI,+CAEJ,4BACI,4BAAKF,KAAKhB,MAAMC,KAAKkB,oBAEzB,4BACI,mDAEJ,4BACI,4BAAKH,KAAKhB,MAAMC,KAAKmB,sBAG7B,4BACI,4BACI,6CAEJ,4BACI,4BAAKJ,KAAKhB,MAAMC,KAAKoB,kBAEzB,4BACI,iDAEJ,4BACI,4BAAKL,KAAKhB,MAAMC,KAAKqB,sBAKrC,wCAAcN,KAAKhB,MAAME,SAAzB,sB,GA7ESqB,aCQVC,MARf,WACI,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.64be74e2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass CoronaData extends Component {\n\n    state = {\n        data: {},\n        timeDiff: 0\n    };\n\n    componentDidMount() {\n        console.log(\"Fetching...\");\n        axios.get('http://hpb.health.gov.lk/api/get-current-statistical')\n            .then(response =>\n                this.setCoronaDate(response.data.data)\n            );\n    }\n\n    setCoronaDate = (data) => {\n        let timestamp = data.update_date_time;\n        console.log(timestamp);\n        let updatedTimestamp = moment(timestamp);\n        let timeDiff = moment().diff(updatedTimestamp, 'minutes');\n        this.setState({\n            data: data,\n            timeDiff: timeDiff\n        })\n    };\n\n    render() {\n        return (\n            <div>\n                <h1>SL Corona Stats</h1>\n                <br/>\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <h3>SL Deaths</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.local_deaths}</h3>\n                            </td>\n                            <td>\n                                <h3>Global Deaths</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.global_deaths}</h3>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <h3>SL Total Cases</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.local_total_cases}</h3>\n                            </td>\n                            <td>\n                                <h3>Global Total Cases</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.global_total_cases}</h3>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <h3>SL Recovered</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.local_recovered}</h3>\n                            </td>\n                            <td>\n                                <h3>Global Recovered</h3>\n                            </td>\n                            <td>\n                                <h3>{this.state.data.global_recovered}</h3>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <h4>Updated: {this.state.timeDiff} minutes ago.</h4>\n            </div>\n        );\n    }\n}\n\nexport default CoronaData;","import React from 'react';\nimport './App.css';\nimport CoronaData from \"./components/CoronaData\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <CoronaData />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}